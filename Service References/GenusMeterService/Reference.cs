//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdapterSamples.GenusMeterService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeterPingStatusEntity", Namespace="http://schemas.datacontract.org/2004/07/Genus.SmartMeter.DomainEntities.UserDefin" +
        "edEntities")]
    [System.SerializableAttribute()]
    public partial class MeterPingStatusEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastCommunicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeterIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastCommunication {
            get {
                return this.LastCommunicationField;
            }
            set {
                if ((object.ReferenceEquals(this.LastCommunicationField, value) != true)) {
                    this.LastCommunicationField = value;
                    this.RaisePropertyChanged("LastCommunication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeterID {
            get {
                return this.MeterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MeterIDField, value) != true)) {
                    this.MeterIDField = value;
                    this.RaisePropertyChanged("MeterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MeterVoltEntity", Namespace="http://schemas.datacontract.org/2004/07/Genus.SmartMeter.DomainEntities.UserDefin" +
        "edEntities")]
    [System.SerializableAttribute()]
    public partial class MeterVoltEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeterIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryTimeStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeReportedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> VoltAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> VoltBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> VoltCField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeterID {
            get {
                return this.MeterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MeterIDField, value) != true)) {
                    this.MeterIDField = value;
                    this.RaisePropertyChanged("MeterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryTimeStamp {
            get {
                return this.QueryTimeStampField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryTimeStampField, value) != true)) {
                    this.QueryTimeStampField = value;
                    this.RaisePropertyChanged("QueryTimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeReported {
            get {
                return this.TimeReportedField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeReportedField, value) != true)) {
                    this.TimeReportedField = value;
                    this.RaisePropertyChanged("TimeReported");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> VoltA {
            get {
                return this.VoltAField;
            }
            set {
                if ((this.VoltAField.Equals(value) != true)) {
                    this.VoltAField = value;
                    this.RaisePropertyChanged("VoltA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> VoltB {
            get {
                return this.VoltBField;
            }
            set {
                if ((this.VoltBField.Equals(value) != true)) {
                    this.VoltBField = value;
                    this.RaisePropertyChanged("VoltB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> VoltC {
            get {
                return this.VoltCField;
            }
            set {
                if ((this.VoltCField.Equals(value) != true)) {
                    this.VoltCField = value;
                    this.RaisePropertyChanged("VoltC");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GenusMeterService.IGenusHES")]
    public interface IGenusHES {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/PerformPeakLoadManagementForMultipleMeters", ReplyAction="http://tempuri.org/IGenusHES/PerformPeakLoadManagementForMultipleMetersResponse")]
        string PerformPeakLoadManagementForMultipleMeters(string[] meterNumbers, double[] kW_Limits, string applicableDate, string fromTime, string toTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/PerformPeakLoadManagementForMultipleMeters", ReplyAction="http://tempuri.org/IGenusHES/PerformPeakLoadManagementForMultipleMetersResponse")]
        System.Threading.Tasks.Task<string> PerformPeakLoadManagementForMultipleMetersAsync(string[] meterNumbers, double[] kW_Limits, string applicableDate, string fromTime, string toTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/PerformPeakLoadManagementForSingleMeter", ReplyAction="http://tempuri.org/IGenusHES/PerformPeakLoadManagementForSingleMeterResponse")]
        string PerformPeakLoadManagementForSingleMeter(string meterNumber, double kW_Limit, string applicableDate, string fromTime, string toTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/PerformPeakLoadManagementForSingleMeter", ReplyAction="http://tempuri.org/IGenusHES/PerformPeakLoadManagementForSingleMeterResponse")]
        System.Threading.Tasks.Task<string> PerformPeakLoadManagementForSingleMeterAsync(string meterNumber, double kW_Limit, string applicableDate, string fromTime, string toTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/OnDemandReadRequest", ReplyAction="http://tempuri.org/IGenusHES/OnDemandReadRequestResponse")]
        string OnDemandReadRequest(string[] meters, string requestType, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/OnDemandReadRequest", ReplyAction="http://tempuri.org/IGenusHES/OnDemandReadRequestResponse")]
        System.Threading.Tasks.Task<string> OnDemandReadRequestAsync(string[] meters, string requestType, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/OnDemandConnectDisconnectRequest", ReplyAction="http://tempuri.org/IGenusHES/OnDemandConnectDisconnectRequestResponse")]
        string OnDemandConnectDisconnectRequest(string[] meters, string applicableDate, string requestType, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/OnDemandConnectDisconnectRequest", ReplyAction="http://tempuri.org/IGenusHES/OnDemandConnectDisconnectRequestResponse")]
        System.Threading.Tasks.Task<string> OnDemandConnectDisconnectRequestAsync(string[] meters, string applicableDate, string requestType, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/GetRequestStatus", ReplyAction="http://tempuri.org/IGenusHES/GetRequestStatusResponse")]
        System.Collections.Generic.Dictionary<string, string> GetRequestStatus(string requestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/GetRequestStatus", ReplyAction="http://tempuri.org/IGenusHES/GetRequestStatusResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetRequestStatusAsync(string requestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/SetTodConfiguration", ReplyAction="http://tempuri.org/IGenusHES/SetTodConfigurationResponse")]
        string SetTodConfiguration(string[] meters, int numberOfTodSlots, string[] tariffTimings, int[] tariffValues, string applicableDateTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/SetTodConfiguration", ReplyAction="http://tempuri.org/IGenusHES/SetTodConfigurationResponse")]
        System.Threading.Tasks.Task<string> SetTodConfigurationAsync(string[] meters, int numberOfTodSlots, string[] tariffTimings, int[] tariffValues, string applicableDateTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/SetMaxDemandIntegrationPeriod", ReplyAction="http://tempuri.org/IGenusHES/SetMaxDemandIntegrationPeriodResponse")]
        string SetMaxDemandIntegrationPeriod(string[] meters, int mdIntegrationPeriod, string applicableDateTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/SetMaxDemandIntegrationPeriod", ReplyAction="http://tempuri.org/IGenusHES/SetMaxDemandIntegrationPeriodResponse")]
        System.Threading.Tasks.Task<string> SetMaxDemandIntegrationPeriodAsync(string[] meters, int mdIntegrationPeriod, string applicableDateTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/ResetBillForMeter", ReplyAction="http://tempuri.org/IGenusHES/ResetBillForMeterResponse")]
        string ResetBillForMeter(string[] meterID, string applicableDate, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/ResetBillForMeter", ReplyAction="http://tempuri.org/IGenusHES/ResetBillForMeterResponse")]
        System.Threading.Tasks.Task<string> ResetBillForMeterAsync(string[] meterID, string applicableDate, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/SetAutoBillingDateForMeters", ReplyAction="http://tempuri.org/IGenusHES/SetAutoBillingDateForMetersResponse")]
        string SetAutoBillingDateForMeters(string[] meters, int dayOfMonth, string applicableTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/SetAutoBillingDateForMeters", ReplyAction="http://tempuri.org/IGenusHES/SetAutoBillingDateForMetersResponse")]
        System.Threading.Tasks.Task<string> SetAutoBillingDateForMetersAsync(string[] meters, int dayOfMonth, string applicableTime, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/GetLatestPingTimeForMeter", ReplyAction="http://tempuri.org/IGenusHES/GetLatestPingTimeForMeterResponse")]
        AdapterSamples.GenusMeterService.MeterPingStatusEntity GetLatestPingTimeForMeter(string meterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/GetLatestPingTimeForMeter", ReplyAction="http://tempuri.org/IGenusHES/GetLatestPingTimeForMeterResponse")]
        System.Threading.Tasks.Task<AdapterSamples.GenusMeterService.MeterPingStatusEntity> GetLatestPingTimeForMeterAsync(string meterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/GetVoltEventForMeter", ReplyAction="http://tempuri.org/IGenusHES/GetVoltEventForMeterResponse")]
        AdapterSamples.GenusMeterService.MeterVoltEntity GetVoltEventForMeter(string meterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenusHES/GetVoltEventForMeter", ReplyAction="http://tempuri.org/IGenusHES/GetVoltEventForMeterResponse")]
        System.Threading.Tasks.Task<AdapterSamples.GenusMeterService.MeterVoltEntity> GetVoltEventForMeterAsync(string meterID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGenusHESChannel : AdapterSamples.GenusMeterService.IGenusHES, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenusHESClient : System.ServiceModel.ClientBase<AdapterSamples.GenusMeterService.IGenusHES>, AdapterSamples.GenusMeterService.IGenusHES {
        
        public GenusHESClient() {
        }
        
        public GenusHESClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GenusHESClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GenusHESClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GenusHESClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string PerformPeakLoadManagementForMultipleMeters(string[] meterNumbers, double[] kW_Limits, string applicableDate, string fromTime, string toTime, string authenticationToken) {
            return base.Channel.PerformPeakLoadManagementForMultipleMeters(meterNumbers, kW_Limits, applicableDate, fromTime, toTime, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> PerformPeakLoadManagementForMultipleMetersAsync(string[] meterNumbers, double[] kW_Limits, string applicableDate, string fromTime, string toTime, string authenticationToken) {
            return base.Channel.PerformPeakLoadManagementForMultipleMetersAsync(meterNumbers, kW_Limits, applicableDate, fromTime, toTime, authenticationToken);
        }
        
        public string PerformPeakLoadManagementForSingleMeter(string meterNumber, double kW_Limit, string applicableDate, string fromTime, string toTime, string authenticationToken) {
            return base.Channel.PerformPeakLoadManagementForSingleMeter(meterNumber, kW_Limit, applicableDate, fromTime, toTime, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> PerformPeakLoadManagementForSingleMeterAsync(string meterNumber, double kW_Limit, string applicableDate, string fromTime, string toTime, string authenticationToken) {
            return base.Channel.PerformPeakLoadManagementForSingleMeterAsync(meterNumber, kW_Limit, applicableDate, fromTime, toTime, authenticationToken);
        }
        
        public string OnDemandReadRequest(string[] meters, string requestType, string authenticationToken) {
            return base.Channel.OnDemandReadRequest(meters, requestType, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> OnDemandReadRequestAsync(string[] meters, string requestType, string authenticationToken) {
            return base.Channel.OnDemandReadRequestAsync(meters, requestType, authenticationToken);
        }
        
        public string OnDemandConnectDisconnectRequest(string[] meters, string applicableDate, string requestType, string authenticationToken) {
            return base.Channel.OnDemandConnectDisconnectRequest(meters, applicableDate, requestType, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> OnDemandConnectDisconnectRequestAsync(string[] meters, string applicableDate, string requestType, string authenticationToken) {
            return base.Channel.OnDemandConnectDisconnectRequestAsync(meters, applicableDate, requestType, authenticationToken);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetRequestStatus(string requestID) {
            return base.Channel.GetRequestStatus(requestID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetRequestStatusAsync(string requestID) {
            return base.Channel.GetRequestStatusAsync(requestID);
        }
        
        public string SetTodConfiguration(string[] meters, int numberOfTodSlots, string[] tariffTimings, int[] tariffValues, string applicableDateTime, string authenticationToken) {
            return base.Channel.SetTodConfiguration(meters, numberOfTodSlots, tariffTimings, tariffValues, applicableDateTime, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> SetTodConfigurationAsync(string[] meters, int numberOfTodSlots, string[] tariffTimings, int[] tariffValues, string applicableDateTime, string authenticationToken) {
            return base.Channel.SetTodConfigurationAsync(meters, numberOfTodSlots, tariffTimings, tariffValues, applicableDateTime, authenticationToken);
        }
        
        public string SetMaxDemandIntegrationPeriod(string[] meters, int mdIntegrationPeriod, string applicableDateTime, string authenticationToken) {
            return base.Channel.SetMaxDemandIntegrationPeriod(meters, mdIntegrationPeriod, applicableDateTime, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> SetMaxDemandIntegrationPeriodAsync(string[] meters, int mdIntegrationPeriod, string applicableDateTime, string authenticationToken) {
            return base.Channel.SetMaxDemandIntegrationPeriodAsync(meters, mdIntegrationPeriod, applicableDateTime, authenticationToken);
        }
        
        public string ResetBillForMeter(string[] meterID, string applicableDate, string authenticationToken) {
            return base.Channel.ResetBillForMeter(meterID, applicableDate, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> ResetBillForMeterAsync(string[] meterID, string applicableDate, string authenticationToken) {
            return base.Channel.ResetBillForMeterAsync(meterID, applicableDate, authenticationToken);
        }
        
        public string SetAutoBillingDateForMeters(string[] meters, int dayOfMonth, string applicableTime, string authenticationToken) {
            return base.Channel.SetAutoBillingDateForMeters(meters, dayOfMonth, applicableTime, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> SetAutoBillingDateForMetersAsync(string[] meters, int dayOfMonth, string applicableTime, string authenticationToken) {
            return base.Channel.SetAutoBillingDateForMetersAsync(meters, dayOfMonth, applicableTime, authenticationToken);
        }
        
        public AdapterSamples.GenusMeterService.MeterPingStatusEntity GetLatestPingTimeForMeter(string meterID) {
            return base.Channel.GetLatestPingTimeForMeter(meterID);
        }
        
        public System.Threading.Tasks.Task<AdapterSamples.GenusMeterService.MeterPingStatusEntity> GetLatestPingTimeForMeterAsync(string meterID) {
            return base.Channel.GetLatestPingTimeForMeterAsync(meterID);
        }
        
        public AdapterSamples.GenusMeterService.MeterVoltEntity GetVoltEventForMeter(string meterID) {
            return base.Channel.GetVoltEventForMeter(meterID);
        }
        
        public System.Threading.Tasks.Task<AdapterSamples.GenusMeterService.MeterVoltEntity> GetVoltEventForMeterAsync(string meterID) {
            return base.Channel.GetVoltEventForMeterAsync(meterID);
        }
    }
}
